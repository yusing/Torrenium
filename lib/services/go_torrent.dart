// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `go_torrent.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class GoTorrentBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GoTorrentBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GoTorrentBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void InitTorrentClient(
    ffi.Pointer<ffi.Char> savePathCStr,
  ) {
    return _InitTorrentClient(
      savePathCStr,
    );
  }

  late final _InitTorrentClientPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'InitTorrentClient');
  late final _InitTorrentClient =
      _InitTorrentClientPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void FreeCString(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _FreeCString(
      s,
    );
  }

  late final _FreeCStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'FreeCString');
  late final _FreeCString =
      _FreeCStringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void DeleteMetadata(
    ffi.Pointer<ffi.Void> torrentPtr,
  ) {
    return _DeleteMetadata(
      torrentPtr,
    );
  }

  late final _DeleteMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DeleteMetadata');
  late final _DeleteMetadata =
      _DeleteMetadataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> AddMagnet(
    ffi.Pointer<ffi.Char> magnetCString,
  ) {
    return _AddMagnet(
      magnetCString,
    );
  }

  late final _AddMagnetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('AddMagnet');
  late final _AddMagnet = _AddMagnetPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> AddTorrent(
    ffi.Pointer<ffi.Char> torrentUrlCStr,
  ) {
    return _AddTorrent(
      torrentUrlCStr,
    );
  }

  late final _AddTorrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('AddTorrent');
  late final _AddTorrent = _AddTorrentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void PauseTorrent(
    ffi.Pointer<ffi.Void> torrentPtr,
  ) {
    return _PauseTorrent(
      torrentPtr,
    );
  }

  late final _PauseTorrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'PauseTorrent');
  late final _PauseTorrent =
      _PauseTorrentPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int ResumeTorrent(
    ffi.Pointer<ffi.Char> infoHashCStr,
  ) {
    return _ResumeTorrent(
      infoHashCStr,
    );
  }

  late final _ResumeTorrentPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>)>>(
          'ResumeTorrent');
  late final _ResumeTorrent =
      _ResumeTorrentPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void DeleteTorrent(
    ffi.Pointer<ffi.Void> torrentPtr,
  ) {
    return _DeleteTorrent(
      torrentPtr,
    );
  }

  late final _DeleteTorrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DeleteTorrent');
  late final _DeleteTorrent =
      _DeleteTorrentPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> GetTorrentInfo(
    ffi.Pointer<ffi.Void> torrentPtr,
  ) {
    return _GetTorrentInfo(
      torrentPtr,
    );
  }

  late final _GetTorrentInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('GetTorrentInfo');
  late final _GetTorrentInfo = _GetTorrentInfoPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> GetTorrentList() {
    return _GetTorrentList();
  }

  late final _GetTorrentListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetTorrentList');
  late final _GetTorrentList =
      _GetTorrentListPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}
